---
- name: Clone your repo to cloud machine
  become: yes
  become_user: "{{ user }}"
  git:
    repo: <ssh repo url>
    dest: /home/ubuntu/example
    accept_hostkey: yes
    remote: origin
    update: yes
    version: "{{ branch_name }}"
    key_file: ~/ssh_keys/.ssh/id_rsa_gitlab
  tags:
    - git-clones
  notify:
    - restart gunicorn
    - restart celery-default
    - restart redis


- name: Install | Activate virtualenv locally
  become_user: "{{ user }}"
  shell: ". /usr/local/bin/virtualenvwrapper.sh && workon {{ virtualenv_name }}"
  args:
    executable: /bin/bash
    chdir: "{{ home_dir }}"

# Run migrate on the application
- django_manage:
    command: migrate
    app_path: "{{ django_dir }}"
    virtualenv: "{{ virtualenv_dir }}"
  ignore_errors: true
  tags:
    - run_django_command

- name: Install Node dependencies
  shell: npm install
  args:
    chdir: "{{ django_dir }}"
  ignore_errors: true
  tags:
    - run_django_command

- name: Build Node dependencies
  shell: npm run build
  args:
    chdir: "{{ django_dir }}"
  ignore_errors: true
  tags:
    - run_django_command


# Run collect-static on the application
- django_manage:
    command: collectstatic
    app_path: "{{ django_dir }}"
    virtualenv: "{{ virtualenv_dir }}"
  ignore_errors: true
  tags:
    - run_django_command
  notify:
    - restart gunicorn
    - restart celery-default
    - restart redis


#- name: mkvirtualenv | Create virtualenv
#  become_user: "{{ user }}"
#  shell: ". /usr/local/bin/virtualenvwrapper.sh && mkvirtualenv {{ virtualenv_name }}"
#  args:
#    executable: /bin/bash
#
#- name: pyenv | Restart user bash shell
#  become_user: "{{ user }}"
#  shell: ". ~/.profile"
#
#- pip:
#    requirements: /home/{{ user }}/example/requirements.txt
#    virtualenv: "{{ virtualenv_dir }}"


#- name: npm run build
#  become_user: "{{ user }}"
#  shell: "{{ item }}"
#  with_items:
#    - npm run build
#  args:
#    chdir: "{{ home_dir }}"
